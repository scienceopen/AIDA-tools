function [Vem,stns] = tomo_steps(Vem,stns,tomo_ops,nr_laps)
% TOMO_STEPS - tomographic itterative step(s).
% VEM is the current 3D distribution STNS are the struct that
% contain the images and camera set up. TOMO_OPS is the struct
% containing the options controling the processing of the
% itteration, NR_LAPS are the number of steps to itterate. 
% 
% Calling:
% [Vem,stns] = tomo_steps(Vem,stns,tomo_ops,nr_laps)
%
% See also TOMO_INP_CAMERA, CAMERA_SET_UP_SC, MAKE_TOMO_OPS
%

%   Copyright ï¿½ 20050110 Bjorn Gustavsson, <bjorn.gustavsson@irf.se>
%   This is free software, licensed under GNU GPL version 2 or later

i1 = 0;

for i3 = 1:nr_laps,
  
  switch tomo_ops(1).tomotype
   case 0
    %art
    for j2 = 1:3
      io = find( [tomo_ops(:).randorder] == j2 );
      junk = rand([1 length(io)]);
      [junk,order] = sort(junk);
      for k = 1:length(order),
        if isfield(stns,'sens_mtr')
          stns(io(order(k))).proj = fastprojection(Vem, ...
                                                   stns(io(order(k))).uv, ...
                                                   stns(io(order(k))).d, ...
                                                   stns(io(order(k))).l_cl, ...
                                                   stns(io(order(k))).bfk, ...
                                                   size(stns(io(order(k))).img),...
                                                   stns(io(order(k))).sens_mtr);
        else
          stns(io(order(k))).proj = fastprojection(Vem, ...
                                                   stns(io(order(k))).uv, ...
                                                   stns(io(order(k))).d, ...
                                                   stns(io(order(k))).l_cl, ...
                                                   stns(io(order(k))).bfk, ...
                                                   size(stns(io(order(k))).img));
        end
	Vem(:) = Vem(:) + backprojection(stns(io(order(k))).img, ...
                                         stns(io(order(k))).proj, ...
                                         stns(io(order(k))).uv, ...
                                         stns(io(order(k))).l_cl, ...
                                         stns(io(order(k))).bfk, ...
                                         io(order(k)), ...
                                         tomo_ops)'/size(Vem,3);
	%Infindx = find(~isfinite(Vem(:)));
	Vem(~isfinite(Vem(:))) = 0;
      end
    end
   case 1
    %art
    for j2 = 1:3
      io = find( [tomo_ops(:).randorder] == j2 );
      junk = rand([1 length(io)]);
      [junk,order] = sort(junk);
      for k = 1:length(order),
        if isfield(stns,'sens_mtr')
          stns(io(order(k))).proj = fastprojection(Vem, ...
                                                   stns(io(order(k))).uv, ...
                                                   stns(io(order(k))).d, ...
                                                   stns(io(order(k))).l_cl, ...
                                                   stns(io(order(k))).bfk, ...
                                                   size(stns(io(order(k))).img),...
                                                   stns(io(order(k))).sens_mtr);
        else
          stns(io(order(k))).proj = fastprojection(Vem, ...
                                                   stns(io(order(k))).uv, ...
                                                   stns(io(order(k))).d, ...
                                                   stns(io(order(k))).l_cl, ...
                                                   stns(io(order(k))).bfk, ...
                                                   size(stns(io(order(k))).img));
        end
	Vem(:) = Vem(:).*backprojection(stns(io(order(k))).img, ...
                                         stns(io(order(k))).proj, ...
                                         stns(io(order(k))).uv, ...
                                         stns(io(order(k))).l_cl, ...
                                         stns(io(order(k))).bfk, ...
                                         io(order(k)), ...
                                         tomo_ops)';
	%Infindx = find(~isfinite(Vem(:)));
	Vem(~isfinite(Vem(:))) = 0;
      end
    end
   case 2
    %msirt
    for j2 = 1:length(stns),
      if isfield(stns,'sens_mtr')
        stns(j2).proj = fastprojection(Vem, ...
                                       stns(j2).uv, ...
                                       stns(j2).d, ...
                                       stns(j2).l_cl, ...
                                       stns(j2).bfk, ...
                                       size(stns(j2).img),...
                                       stns(j2).sens_mtr);
      else
        stns(j2).proj = fastprojection(Vem, ...
                                       stns(j2).uv, ...
                                       stns(j2).d, ...
                                       stns(j2).l_cl, ...
                                       stns(j2).bfk, ...
                                       size(stns(j2).img));
      end
    end
    for j2 = 1:length(stns),
      
      Vem(:) = Vem(:).*real(backprojection(stns(j2).img,...
				      stns(j2).proj,...
				      stns(j2).uv,...
				      stns(j2).l_cl,...
				      stns(j2).bfk,...
				      j2, ...
				      tomo_ops).^(1/length(stns)))';

    end
    %Infindx = find(~isfinite(Vem(:)));
    Vem(~isfinite(Vem(:))) = 0;
   case 3
    %sirt
    for j2 = 1:length(stns),
      if isfield(stns,'sens_mtr')
        stns(j2).proj = fastprojection(Vem, ...
                                       stns(j2).uv, ...
                                       stns(j2).d, ...
                                       stns(j2).l_cl, ...
                                       stns(j2).bfk, ...
                                       size(stns(j2).img),...
                                       stns(j2).sens_mtr);
      else
        stns(j2).proj = fastprojection(Vem, ...
                                       stns(j2).uv, ...
                                       stns(j2).d, ...
                                       stns(j2).l_cl, ...
                                       stns(j2).bfk, ...
                                       size(stns(j2).img));
      end
    end
    dVem = backprojection(stns(1).img,...
			  stns(1).proj,...
			  stns(1).uv,...
			  stns(1).l_cl,...
			  stns(1).bfk,...
			  1, ...
			  tomo_ops);
    for j2 = 2:length(stns),
      dVem = dVem + backprojection(stns(j2).img,...
				   stns(j2).proj,...
				   stns(j2).uv,...
				   stns(j2).l_cl,...
				   stns(j2).bfk,...
				   j2, ...
				   tomo_ops);
    end
    Vem(:) = Vem(:).*dVem(:)/length(stns);
    %Infindx = find(~isfinite(Vem(:)));
    Vem(~isfinite(Vem(:))) = 0;
   otherwise %4
	     %fmape
  end % switch tomotype
  
  if strcmp(tomo_ops(1).disp,'disp')
    
    for i12 = 1:length(stns),
      
      mysubplot(length(stns)+1,2,1+2*(i12-1))
      cla
      imagesc(stns(i12).img),axis xy
      imgs_smart_caxis(0.001,stns(i12).img)
      cax = caxis;
      hold on
      contour('v6',stns(i12).proj,12,'k')
      norm_regx1 = tomo_ops(i12).renorm(1);
      mysubplot(length(stns)+1,2,2*(i12))
      imagesc(stns(i12).proj),axis xy,
      if ~isfinite(norm_regx1)
        caxis(cax)
      end
      
    end
    if isfield(tomo_ops(1),'iZ')  && ~isempty(tomo_ops(1).iZ)
      iZ = tomo_ops(1).iZ;
    else
      iZ = 15;
    end
    mysubplot(length(stns)+1,1,length(stns)+1)
    imagesc(squeeze(Vem(:,:,15))),imgs_smart_caxis(0.01,squeeze(Vem(:,:,iZ)))
    imgs_smart_caxis(0.001,squeeze(Vem(:,:,iZ)))
    drawnow
    
  end
  
  if i3 < nr_laps,
    
    % Here, after the itteration, we do filtering to suppress noise
    switch tomo_ops(1).filtertype
     case 1 % horizontal 2D averaging
      for k = 1:size(Vem,3),
        Vem(:,:,k) = conv2(squeeze(Vem(:,:,k)),tomo_ops(1).filterkernel,'same');
      end
     case 2 % horizontal 2D median
      for k = 1:size(Vem,3),
        Vem(:,:,k) = medfilt2(squeeze(Vem(:,:,k)),tomo_ops(1).filterkernel);
      end
     case 3 % proximity filtering
      fiel_align_int = sum(Vem,3);
      filt_f_a_i = conv2(fiel_align_int,tomo_ops(1).filterkernel,'same');
      for k = 1:size(Vem,3),
        Vem(:,:,k) = conv2(squeeze(Vem(:,:,k)),tomo_ops(1).filterkernel,'same').*fiel_align_int./filt_f_a_i;
      end
      %Infindx = find(~isfinite(Vem(:)));
      Vem(~isfinite(Vem(:))) = 0;
     case 4 % proximity sharpening, Lucy-Richardson deconvolution-like
      fiel_align_int = sum(Vem,3);
      %filt_f_a_i = conv2(fiel_align_int,tomo_ops(1).filterkernel,'same');
      deconvd_f_a_i = imgs_deconv_crude(fiel_align_int,tomo_ops(1).filterkernel,1,1);
      for k = 1:size(Vem,3),
        Vem(:,:,k) = squeeze(Vem(:,:,k)).*deconvd_f_a_i./fiel_align_int;
      end
      %Infindx = find(~isfinite(Vem(:)));
      Vem(~isfinite(Vem(:))) = 0;
     otherwise
      % no filtering
    end % switch filtertype
    
    i1 = i1+1;
  end % while (i<4),
  
end

for j2 = 1:length(stns),
  stns(j2).proj = fastprojection(Vem, ...
                                 stns(j2).uv, ...
                                 stns(j2).d, ...
                                 stns(j2).l_cl, ...
                                 stns(j2).bfk, ...
                                 size(stns(j2).img));
end
